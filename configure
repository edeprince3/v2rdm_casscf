#!/bin/bash

if [[ $1 = "--help"  || $1 = "-h" ]] ; then
    cat <<EOF 
Usage ./configure <OPTIONS>
  OPTIONS
    --help                    : Display this message
    --prefix=<PATH>           : Psi4 installation path
    --cxx=<PATH>              : C++ compiler
    --cxxdefs=<DEFS>          : All definitions to pass to compiler
    --cxxflags=<FLAGS>        : All flags to pass to compiler
    --ldflags=<FLAGS>         : All flags to pass to linker
    --includes=<PATHS>        : Include dirs to pass to linker
    --python=<PATH>           : Interpreter to which plugin installed
    --fc=<PATH>               : Fortran compiler
    --flibs=<PATHS>           : Libraries to compile Fortran
    --fflags=<FLAGS>          : Flags to compile Fortran
EOF
    exit 0
fi

PSI4CONFIG=$(which psi4-config)
if [[ "$PSI4CONFIG" = "" ]]; then
    echo "Warning: psi4-config: command not found"
    echo "All values must be passed in as arguments."
    #exit 1
fi

PREFIX="$(psi4-config --prefix 2>&1 >/dev/null)" 
CXX="$(psi4-config --cxx 2>&1 >/dev/null)" 
CXXDEFS="$(psi4-config --defines 2>&1 >/dev/null)" 
CXXFLAGS="$(psi4-config --flags 2>&1 >/dev/null)"
LDFLAGS="$(psi4-config --ldflags 2>&1 >/dev/null)" 
INCLUDES="$(psi4-config --includes 2>&1 >/dev/null)" 
PYTHON="$(psi4-config --python 2>&1 >/dev/null)" 
F90="$(psi4-config --fc 2>&1 >/dev/null)" 

#F90_LIB=-lifcore
#F90_FLAGS="-heap-arrays -qopenmp -O2 -fPIC -DOMP"

# for ifort:
#F90_LIB=-lifcore
# for gfortran ... but use the correct gcc directory
#F90_LIB='-L/opt/local/lib/gcc48/ -lgfortran' 

while [[ $# > 0 ]]
do
    VALUE=""
    POS=`echo $1 | awk 'match($0,"="){print RSTART}'`
    if [[ $POS -eq 1 ]] ; then
      echo "Error: '=' cannot be first character in an argument." > /dev/stderr ; exit 1
    elif [[ $POS -gt 1 ]] ; then
      ((PM1 = $POS - 1))
      KEY=${1:0:$PM1}
      VALUE=${1:$POS}
      if [[ $VALUE = "" ]] ; then
        echo "Error: '$1': Expected <var>=<value>, missing <value>." > /dev/stderr ; exit 1
      fi
      eval VALUE=$VALUE 2> /dev/null
    else
      KEY=$1
    fi

    case $KEY in
        --prefix)
            PREFIX="${VALUE}"
            ;;
        --cxx)
            CXX="${VALUE}"
            ;;
        --cxxdefs)
            CXXDEFS="${VALUE}"
            ;;
        --cxxflags)
            CXXFLAGS="${VALUE}"
            ;;
        --ldflags)
            LDFLAGS="${VALUE}"
            ;;
        --includes)
            INCLUDES="${VALUE}"
            ;;
        --python)
            PYTHON="${VALUE}"
            ;;
        --fc)
            F90="${VALUE}"
            ;;
        --flibs)
            F90_LIB="${VALUE}"
            ;;
        --fflags)
            F90_FLAGS="${VALUE}"
            ;;
        *)
            echo "Unrecognized OPTION: $1"
            exit 1
            ;;
    esac
    shift # past argument or value
done

SITEPACKAGES="$(${PYTHON} -c 'import site; print(site.getsitepackages()[0])')"

MAKEFILE_CONTENTS=$(cat <<'EOF'
# The name of your plugin. Taken from the directory name.
NAME = $(shell basename `pwd`)

# C++ source files for your plugin. By default we grab all *.cc files.
CXXSRC = $(notdir $(wildcard *.cc))
F90SRC = $(notdir $(wildcard *.F90))

# Used to determine linking flags.
UNAME = $(shell uname)

DEPENDINCLUDE = $(notdir $(wildcard *.h*))

PSITARGET = $(NAME).so

# Start the compilation rules
default:: $(PSITARGET)

# Add the flags needed for shared library creation
ifeq ($(UNAME), Linux)
    LDFLAGS += -shared
endif
ifeq ($(UNAME), Darwin)
    LDFLAGS += -shared -undefined dynamic_lookup
    CXXFLAGS += -fno-common
endif

# The object files
BINOBJ = $(CXXSRC:%.cc=%.o) 
FBINOBJ = $(F90SRC:%.F90=%.o)

focas_data.o: focas_data.F90
	$(F90) $(F90_FLAGS) -c $<

focas_redundant.o: focas_redundant.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_diis.o: focas_diis.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_gradient.o: focas_gradient.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_energy.o: focas_energy.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_hessian.o: focas_hessian.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_exponential.o: focas_exponential.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_transform_teints.o: focas_transform_teints.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_transform_oeints.o: focas_transform_oeints.F90 focas_data.o
	$(F90) $(F90_FLAGS) -c $<

focas_transform_driver.o: focas_transform_driver.F90 focas_transform_teints.o focas_transform_oeints.o 
	$(F90) $(F90_FLAGS) -c $<

focas_driver.o: focas_driver.F90 focas_redundant.o focas_exponential.o focas_transform_driver.o focas_energy.o focas_gradient.o focas_hessian.o focas_diis.o 
	$(F90) $(F90_FLAGS) -c $<

focas_semicanonical.o: focas_semicanonical.F90 focas_redundant.o focas_driver.o focas_data.o focas_energy.o focas_transform_driver.o 
	$(F90) $(F90_FLAGS) -c $<

focas_genfock.o: focas_genfock.F90 focas_data.o focas_driver.o focas_gradient.o
	$(F90) $(F90_FLAGS) -c $<

focas_interface.o: focas_interface.F90 focas_semicanonical.o focas_driver.o focas_genfock.o
	$(F90) $(F90_FLAGS) -c $<
	rm *mod

%.o: %.cc focas_interface.o
	$(CXX) $(CXXDEFS) $(CXXFLAGS) $(INCLUDES) -c $<

$(PSITARGET): $(BINOBJ) $(FBINOBJ)
	$(CXX) $(F90_LIB) $(LDFLAGS) -o $@ $^ $(CXXDEFS)

# Erase all compiled intermediate files
clean:
	rm -f $(BINOBJ) $(FBINOBJ) $(PSITARGET) *.mod *.d *.pyc *.test output.dat psi.timer.dat

print-%:
	@echo '$*=$($*)'
EOF
)


# rm -f Makefile
cat <<EOF > Makefile
PREFIX := ${PREFIX}
CXX := ${CXX}
CXXDEFS := ${CXXDEFS}
CXXFLAGS := ${CXXFLAGS}
LDFLAGS := ${LDFLAGS}
INCLUDES := ${INCLUDES} 
PYTHON := ${PYTHON}
SITEPACKAGES := ${SITEPACKAGES}
F90 := ${F90}
F90_LIB := ${F90_LIB}
F90_FLAGS := ${F90_FLAGS}

${MAKEFILE_CONTENTS}
EOF
echo "Writing Makefile"
#mkdir -p obj

